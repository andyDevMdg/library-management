openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: PROG3-TD1-STD22089-RAZAFINDRAKOTO Andy Avotiana
servers:
  - url: https://library.com

paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: bookReleaseMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: bookReleaseMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be before `releaseDateMax`.
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"

      
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Book"
      responses:
        200:
          description: The list of books created or updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      description: The returned authors are filtered by naùe
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: return authors by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"

    put:
      tags:
        - Authors
      summary: Create or update a list of authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        200:
          description: list of authors created or updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"

    delete:
      tags:
        - Authors
      summary: Delete all authors
      operationId: deleteAllAuhtors
      parameters:
        - in: query
          name: allAuthors
          description: describe all authors to be deleted
          required: true
          schema:
            type: string
      responses:
        200:
          description: All authors deleted successfully

  /authors/{authorId}:
    delete:
      tags:
        - Authors
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - in: path
          name: authorId
          description: author Id to be deleted
          required: true
          schema:
            type: string
      responses:
        "200":
          description: author deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"


  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Authors
      summary: update the author of a book by its id
      operationId: updateAuthor
      parameters:
        - in: path
          name: bookId
          description: Id of the book written by the author to be updated
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: author Id to be updated
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Author updated successfully

  /books/authors:
    put:
      tags:
        - Authors
      summary: update book author
      operationId: updateBookAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        "200":
          description: book author updated successfully

#b.i. Car il suffit de ces propriétés pour identifier les objets à modifier et effectuer l'opération
#b.ii. Dans le cas d'un GET

  /authors/page/{page}/pageSize/{pageSize}:
    get:
      tags:
        - Authors
      summary: page and pageSize
      operationId: pagination
      parameters:
        - in: path
          name: page
          schema:
            type: integer
          description: Set value to 1 by default if null is provided
          required: true
        - in: path
          name: pageSize
          schema:
            type: integer
          description: Set value to 50 by default if null is provided
          required: true
      responses:
        "200":
          description: list of authors
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Author"


components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: "#/components/schemas/CrupdateBook"
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date

    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          $ref: "#/components/schemas/Sex"

    Sex:
      type: string
      format: char
      enum:
        - M
        - F

    CrupdateBook:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
  
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string